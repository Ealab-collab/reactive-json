renderView:
  - type: link
    attributes:
      rel: stylesheet
      href: /rjs-build/demo-simple.css

  - type: div
    content:
      type: ReactiveJsonSubroot
      dataOverrideEvaluationDepth: -1
      rjOptions:
        # We reuse the home.yaml file to demonstrate the dataOverride property.
        rjBuildUrl: /rjs-build/home.yaml
        dataOverride:
          page_title: ~~.page_title
          body_content: This is a demo page with some components.

  - type: h2
    content: Static content

  - type: div
    attributes:
      class: simple-accordion
    content:
      - type: div
        attributes:
          class: simple-accordion-item
        content:
          - type: div
            attributes:
              class: simple-accordion-header
            content: First accordion item
          - type: div
            attributes:
              class: simple-accordion-body
            content: Content of the first accordion item.
      - type: div
        attributes:
          class: simple-accordion-item
        content:
          - type: div
            attributes:
              class: simple-accordion-header
            content: Second accordion item
          - type: div
            attributes:
              class: simple-accordion-body
            content:
              - type: div
                attributes:
                  class: text-center
                content: Content of the second accordion item.
              - type: div
                attributes:
                  class: simple-row
                content:
                  - type: div
                    attributes:
                      class: simple-col
                    content: Of course, you can put any component you want in it. This is a column...
                  - type: div
                    attributes:
                      class: simple-col
                    content: ...and this is another column. Our tool is compatible with any CSS system.
      - type: div
        attributes:
          class: simple-accordion-item
        content:
          - type: div
            attributes:
              class: simple-accordion-header
            content:
              - "Third "
              - type: span
                attributes:
                  class: fw-bold
                content: accordion
              - " item "
          - type: div
            attributes:
              class: simple-accordion-body
            content: Demonstrates that you can customize in the accordion item heading, as you could in any other place.

  - type: hr

  - type: h2
    content: Additional Data (additionalDataSource)

  - type: p
    content: This section demonstrates the use of additionalDataSource to load data from external sources with blocking and non-blocking modes.

  - type: div
    attributes:
      class: simple-alert simple-alert-warning mb-3
    content:
      - type: strong
        content: "Blocking vs Non-blocking loading: "
      - "User profile data is loaded with "
      - type: code
        content: "blocking: true"
      - " (page waits), while system config and notifications load with "
      - type: code
        content: "blocking: false"
      - " (page renders immediately, data updates when ready). (Note: you may need to limit the bandwidth of the server or the browser to see the difference.)"

  - type: div
    attributes:
      class: simple-row
    content:
      - type: div
        attributes:
          class: simple-col-4
        content:
          - type: h3
            content: 
              - "User Profile "
              - type: span
                attributes:
                  class: simple-badge simple-badge-danger ms-2
                content: BLOCKING
          - type: div
            attributes:
              class: simple-card
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: div
                    attributes:
                      class: mb-3
                    content:
                      - type: h5
                        attributes:
                          class: mb-1
                        content: ~~.currentUser.name
                      - type: span
                        attributes:
                          class: simple-badge simple-badge-primary
                        content: ~~.currentUser.role
                  - type: p
                    content:
                      - "Email: "
                      - type: strong
                        content: ~~.currentUser.email
                  - type: p
                    content:
                      - "Last login: "
                      - type: em
                        content: ~~.currentUser.lastLogin

      - type: div
        attributes:
          class: simple-col-4
        content:
          - type: h3
            content:
              - "System Config "
              - type: span
                attributes:
                  class: simple-badge simple-badge-success ms-2
                content: NON-BLOCKING
          - type: div
            attributes:
              class: simple-card
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: div
                    attributes:
                      class: text-muted fst-italic
                    content: "Loading system configuration..."
                    actions:
                      - what: hide
                        when: ~~.systemConfig.version
                        isEmpty: not
                  - type: div
                    actions:
                      - what: hide
                        when: ~~.systemConfig.version
                        isEmpty:
                    content:
                      - type: p
                        content:
                          - "Version: "
                          - type: code
                            content: ~~.systemConfig.version
                      - type: p
                        content:
                          - "Environment: "
                          - type: span
                            attributes:
                              class: simple-badge simple-badge-info
                            content: ~~.systemConfig.environment
                      - type: h6
                        content: Features
                      - type: ul
                        content:
                          - type: li
                            content:
                              - "Dark mode: "
                              - type: span
                                attributes:
                                  class: text-success
                                content: "✓ Enabled"
                                actions:
                                  - what: hide
                                    when: ~~.systemConfig.features.darkMode
                                    isNot: true
                              - type: span
                                attributes:
                                  class: text-danger
                                content: "✗ Disabled"
                                actions:
                                  - what: hide
                                    when: ~~.systemConfig.features.darkMode
                                    is: true
                          - type: li
                            content:
                              - "Beta: "
                              - type: span
                                attributes:
                                  class: text-success
                                content: "✓ Enabled"
                                actions:
                                  - what: hide
                                    when: ~~.systemConfig.features.beta
                                    isNot: true
                              - type: span
                                attributes:
                                  class: text-danger
                                content: "✗ Disabled"
                                actions:
                                  - what: hide
                                    when: ~~.systemConfig.features.beta
                                    is: true

      - type: div
        attributes:
          class: simple-col-4
        content:
          - type: h3
            content:
              - "Notifications "
              - type: span
                attributes:
                  class: simple-badge simple-badge-success ms-2
                content: NON-BLOCKING
          - type: div
            attributes:
              class: simple-card
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: div
                    attributes:
                      class: text-muted fst-italic
                    content: "Loading notification settings..."
                    actions:
                      - what: hide
                        when: ~~.notifications.frequency
                        isEmpty: not
                  - type: div
                    actions:
                      - what: hide
                        when: ~~.notifications.frequency
                        isEmpty:
                    content:
                      - type: p
                        content:
                          - "Frequency: "
                          - type: span
                            attributes:
                              class: simple-badge simple-badge-secondary
                            content: ~~.notifications.frequency
                      - type: h6
                        content: Notification Types
                      - type: ul
                        content:
                          - type: li
                            content:
                              - "Email: "
                              - type: span
                                attributes:
                                  class: text-success
                                content: "✓ Enabled"
                                actions:
                                  - what: hide
                                    when: ~~.notifications.emailNotifications
                                    isNot: true
                              - type: span
                                attributes:
                                  class: text-danger
                                content: "✗ Disabled"
                                actions:
                                  - what: hide
                                    when: ~~.notifications.emailNotifications
                                    is: true
                          - type: li
                            content:
                              - "Push: "
                              - type: span
                                attributes:
                                  class: text-success
                                content: "✓ Enabled"
                                actions:
                                  - what: hide
                                    when: ~~.notifications.pushNotifications
                                    isNot: true
                              - type: span
                                attributes:
                                  class: text-danger
                                content: "✗ Disabled"
                                actions:
                                  - what: hide
                                    when: ~~.notifications.pushNotifications
                                    is: true

  - type: hr

  - type: h2
    content: SetData Tests

  - type: p
    content: This section demonstrates the `setData` reaction with examples from the documentation.

  - type: div
    attributes:
      class: simple-row
    content:
      - type: div
        attributes:
          class: simple-col-6
        content:
          - type: h3
            content: "Basic Usage"
          - type: div
            attributes:
              class: simple-card
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: div
                    attributes:
                      class: mb-3
                    content: ["Current value: ", ~~.setDataTests.myValue]
                  - type: button
                    attributes:
                      class: simple-btn simple-btn-primary me-2
                    content: "Set value to 'Hello World'"
                    actions:
                      - what: setData
                        on: click
                        path: ~~.setDataTests.myValue
                        value: "Hello World"
                  - type: button
                    attributes:
                      class: simple-btn simple-btn-secondary
                    content: "Set value to 'Another value'"
                    actions:
                      - what: setData
                        on: click
                        path: ~~.setDataTests.myValue
                        value: "Another value"

      - type: div
        attributes:
          class: simple-col-6
        content:
          - type: h3
            content: "Conditional Usage"
          - type: div
            attributes:
              class: simple-card
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: div
                    attributes:
                      class: mb-3
                    content:
                      - type: label
                        content: "Username:"
                      - type: input
                        attributes:
                          type: text
                          placeholder: "Enter username"
                          class: simple-input
                          value: ~~.setDataTests.username
                        actions:
                          - what: setData
                            on: change
                            path: ~~.setDataTests.username
                            value: <reactive-json:event-new-value>
                  - type: button
                    attributes:
                      class: simple-btn simple-btn-success mb-3
                    content: "Set Welcome Message"
                    actions:
                      - what: setData
                        on: click
                        path: ~~.setDataTests.message
                        value: ["Welcome, ", ~~.setDataTests.username, "!"]
                        when: ~~.setDataTests.username
                        isEmpty: "not"
                      - what: setData
                        on: click
                        path: ~~.setDataTests.message
                        value: "Please enter a username first"
                        when: ~~.setDataTests.username
                        isEmpty: true
                  - type: div
                    attributes:
                      class: simple-alert simple-alert-info
                    content: ~~.setDataTests.message
                    actions:
                      - what: hide
                        when: ~~.setDataTests.message
                        isEmpty: true

  - type: hr

  - type: h2
    content: SimpleMapping Tests

  - type: p
    content: This section demonstrates the new `simpleMapping` dataMapping system with 2-phase processing (gather + apply) and robust error handling.

  - type: div
    attributes:
      class: simple-row
    content:
      - type: div
        attributes:
          class: simple-col-6
        content:
          - type: h3
            content: "Basic Mapping"
          - type: div
            attributes:
              class: simple-card
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: div
                    attributes:
                      class: mb-3
                    content: 
                      - "Mapped user: "
                      - type: strong
                        content: ~~.mappingTests.user.name
                      - " ("
                      - type: em
                        content: ~~.mappingTests.user.email
                      - ")"
                  - type: div
                    attributes:
                      class: mb-3
                    content:
                      - "Mapped theme: "
                      - type: code
                        content: ~~.mappingTests.theme
                  - type: button
                    attributes:
                      class: simple-btn simple-btn-primary
                    content: "Test Basic Mapping"
                    actions:
                      - what: fetchData
                        on: click
                        url: "/rjs-build/test-data/user-profile.json"
                        updateOnlyData: true
                        dataMapping:
                          simpleMapping:
                            stringMap:
                              "~~.mappingTests.user.name":        # ← Destination: data.mappingTests.user
                                value: "name"                # ← Source: response.name
                                updateMode: "replace"
                              "~~.mappingTests.theme":       # ← Destination: data.mappingTests.theme
                                value: "preferences.theme"  # ← Source: response.preferences.theme
                                updateMode: ""                  # Default (replace)

      - type: div
        attributes:
          class: simple-col-6
        content:
          - type: h3
            content: "Error Handling & Fallbacks"
          - type: div
            attributes:
              class: simple-card
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: div
                    attributes:
                      class: mb-3
                    content:
                      - "Fallback user: "
                      - type: strong
                        content: ~~.mappingTests.fallbackUser.name
                      - " ("
                      - type: em
                        content: ~~.mappingTests.fallbackUser.status
                      - ")"
                  - type: div
                    attributes:
                      class: mb-3
                    content:
                      - "Error result: "
                      - type: code
                        content: ~~.mappingTests.errorResult
                  - type: button
                    attributes:
                      class: simple-btn simple-btn-warning
                    content: "Test Error Handling"
                    actions:
                      - what: fetchData
                        on: click
                        url: "/invalid-url-that-will-fail.json"
                        updateOnlyData: true
                        dataMapping:
                          simpleMapping:
                            stringMap:
                              "~~.mappingTests.fallbackUser.name":   # ← Destination: data.mappingTests.fallbackUser
                                value: "user"                  # ← Source: response.user (will fail)
                                required: true
                              "~~.mappingTests.errorResult":    # ← Destination: data.mappingTests.errorResult
                                value: "nonexistent.data"     # ← Source: response.nonexistent.data (will fail)
                                required: true
                            onErrorMap:
                              "~~.mappingTests.fallbackUser.name":   # ← Fallback using template
                                value: "~~.defaultUser.name"      # Uses template evaluation!
                                updateMode: "replace"
                              "~~.mappingTests.fallbackUser.status":
                                value: "Error fallback"
                              "~~.mappingTests.errorResult":
                                value: "Mapping failed, fallback applied"

  - type: div
    attributes:
      class: simple-row mt-4
    content:
      - type: div
        attributes:
          class: simple-col-6
        content:
          - type: h3
            content: "Default Values"
          - type: div
            attributes:
              class: simple-card
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: div
                    attributes:
                      class: mb-3
                    content:
                      - "Config with defaults: "
                      - type: code
                        content: ~~.mappingTests.config.theme
                      - " / "
                      - type: code
                        content: ~~.mappingTests.config.language
                  - type: button
                    attributes:
                      class: simple-btn simple-btn-info
                    content: "Test Default Values"
                    actions:
                      - what: fetchData
                        on: click
                        url: "/rjs-build/test-data/system-config.json"
                        updateOnlyData: true
                        dataMapping:
                          simpleMapping:
                            stringMap:
                              "~~.mappingTests.config.theme":     # ← Destination
                                value: "nonexistent.theme"       # ← Source (doesn't exist)
                                required: false
                                defaultValue: "~~.defaultTheme"     # Template-evaluated default!
                              "~~.mappingTests.config.language":  # ← Destination
                                value: "missing.language"        # ← Source (doesn't exist)
                                required: false
                                defaultValue: "fr-FR"               # Static default

      - type: div
        attributes:
          class: simple-col-6
        content:
          - type: h3
            content: "Current Mapping Data"
          - type: div
            attributes:
              class: simple-card
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: div
                    attributes:
                      class: mb-2
                    content:
                      - type: strong
                        content: "User: "
                      - ~~.mappingTests.user.name
                      - " ("
                      - ~~.mappingTests.user.email
                      - ")"
                  - type: div
                    attributes:
                      class: mb-2
                    content:
                      - type: strong
                        content: "Theme: "
                      - type: code
                        content: ~~.mappingTests.theme
                  - type: div
                    attributes:
                      class: mb-2
                    content:
                      - type: strong
                        content: "Fallback User: "
                      - ~~.mappingTests.fallbackUser.name
                      - " ("
                      - ~~.mappingTests.fallbackUser.status
                      - ")"
                  - type: div
                    attributes:
                      class: mb-2
                    content:
                      - type: strong
                        content: "Error Result: "
                      - type: code
                        content: ~~.mappingTests.errorResult
                  - type: div
                    content:
                      - type: strong
                        content: "Config: "
                      - "Theme="
                      - type: code
                        content: ~~.mappingTests.config.theme
                      - ", Language="
                      - type: code
                        content: ~~.mappingTests.config.language

  - type: hr

  - type: DataFilter
    context: global
    filters:
      - subjectsWithProperty: dynamicContentRow
        andConditions:
          - orConditions:
              - when: ~~._search
                isEmpty:
              - whenFilterableData: dynamicContentRow.title
                contains: ~~._search

    content:
      load: mainContent

  - type: div
    attributes:
      style:
        paddingTop: 10em

templates:

  mainContent:
    - type: h2
      content: Dynamic content
    - type: div
      content: We will now demonstrate how to build dynamic interfaces.


    - type: input
      attributes:
        type: text
        placeholder: Insert some text to search here...
        class: simple-input
        value: ~~._search
      actions:
        - what: setData
          on: change
          path: ~~._search
          value: <reactive-json:event-new-value>

    - type: button
      attributes:
        class: simple-btn simple-btn-link
      content: Select All
      actions:
        - what: postMessage
          on: click
          message:
            actor: select_all

    - type: button
      attributes:
        class: simple-btn simple-btn-link
      content: Unselect All
      actions:
        - what: postMessage
          on: click
          message:
            actor: unselect_all

    - type: button
      content: Bulk delete
      actions:
        - what: hide
          whenDataCountOf: $.rows[*][?(@.selected == true)]
          inContext: global
          is: 0
        - what: postMessage
          on: click
          message:
            actor: bulk_delete_selected


    - type: table
      attributes:
        class: simple-table
      content:
        type: tbody
        content:
          - type: Switch
            content: ~~.rows
            paginated: true
            paginationProps:
              maxPageButtonsCount: 5
              pageMaxItemCount: 7
            options:
              dynamicContentRow:
                load: dynamicContentRow
            after:
              type: tr
              content:
                type: td
                attributes:
                  colspan: 3
                content:
                  type: PageControls

    - type: button
      content: Add a row
      actions:
        - what: addData
          on: click
          path: ~~.rows
          value:
            dynamicContentRow:
              selected: false
              title: Please edit the title

  dynamicContentRow:
    type: tr
    actions:
      - what: removeData
        on: message
        whenMessageIs:
          actor: bulk_delete_selected
        when: ~.selected
        is: true
        target: currentTemplateData
        parentLevel: 1
    content:
      select:
        type: td
        content:
          type: input
          attributes:
            type: checkbox
            class: simple-checkbox
            checked: ~.selected
          actions:
            - what: setData
              on: change
              path: ~.selected
              value: <reactive-json:event-new-value>
            - what: setData
              path: ~.selected
              value: true
              on: message
              whenMessageIs:
                actor: select_all
            - what: setData
              path: ~.selected
              value: false
              on: message
              whenMessageIs:
                actor: unselect_all
      title:
        type: td
        content:
          type: div
          content: ~.title
      actions:
        type: td
        content:
          - type: button
            content: Edit
            attributes:
              class: simple-btn simple-btn-primary
            actions:
              - what: setData
                on: click
                path: ~._openEditModal
                value: true
              - what: hide
                when: ~._openEditModal
                is: true
          - type: div
            attributes:
              class: simple-card
            actions:
              - what: hide
                when: ~._openEditModal
                isEmpty: true
            content:
              - type: div
                attributes:
                  class: simple-card-body
                content:
                  - type: h6
                    content: Edit content
                  - type: div
                    attributes:
                      class: mb-3
                    content:
                      - type: label
                        content: "Content title:"
                      - type: input
                        attributes:
                          type: text
                          class: simple-input
                          value: ~.title
                        actions:
                          - what: setData
                            on: change
                            path: ~.title
                            value: <reactive-json:event-new-value>
                  - type: button
                    content: OK
                    attributes:
                      class: simple-btn simple-btn-success me-2
                    actions:
                      - what: setData
                        on: click
                        path: ~._openEditModal
                        value: false
                  - type: button
                    content: Cancel
                    attributes:
                      class: simple-btn simple-btn-secondary
                    actions:
                      - what: setData
                        on: click
                        path: ~._openEditModal
                        value: false



data:
  page_title: Demo page!
  setDataTests:
    myValue: "initial value"
    username: ""
    message: ""
  mappingTests:
    user:
      name: "Not mapped yet"
      email: "no-email@example.com"
    theme: "default"
    fallbackUser:
      name: "No fallback yet"
      status: "pending"
    errorResult: "No test run"
    config:
      theme: "not-set"
      language: "not-set"
  defaultUser:
    name: "Fallback User"
  defaultTheme: "dark-mode"
  # Temporary loading states for non-blocking data sources
  systemConfig:
    version: "" # Will be populated by additionalDataSource
    environment: "" # Will be populated by additionalDataSource
    features:
      darkMode: null # Will be populated by additionalDataSource
      beta: null # Will be populated by additionalDataSource
  notifications:
    frequency: "" # Will be populated by additionalDataSource
    emailNotifications: null # Will be populated by additionalDataSource
    pushNotifications: null # Will be populated by additionalDataSource
  rows:
    - dynamicContentRow:
        selected: false
        title: Content name A
    - dynamicContentRow:
        selected: false
        title: Content name B
    - dynamicContentRow:
        selected: false
        title: Content name C
    - dynamicContentRow:
        selected: false
        title: Content name D
    - dynamicContentRow:
        selected: false
        title: Content name E
    - dynamicContentRow:
        selected: false
        title: Content name F
    - dynamicContentRow:
        selected: false
        title: Content name G
    - dynamicContentRow:
        selected: false
        title: Content name H
    - dynamicContentRow:
        selected: false
        title: Content name I
    - dynamicContentRow:
        selected: false
        title: Content name J
    - dynamicContentRow:
        selected: false
        title: Content name K
    - dynamicContentRow:
        selected: false
        title: Content name L
    - dynamicContentRow:
        selected: false
        title: Content name M
    - dynamicContentRow:
        selected: false
        title: Content name N
    - dynamicContentRow:
        selected: false
        title: Content name O
    - dynamicContentRow:
        selected: false
        title: Content name P
    - dynamicContentRow:
        selected: false
        title: Content name Q
    - dynamicContentRow:
        selected: false
        title: Content name R
    - dynamicContentRow:
        selected: false
        title: Content name S
    - dynamicContentRow:
        selected: false
        title: Content name T

additionalDataSource:
  - src: /rjs-build/test-data/user-profile.json
    path: ~~.currentUser
    method: GET
    blocking: true
  - src: /rjs-build/test-data/system-config.json
    path: ~~.systemConfig
    method: GET
    blocking: false
  - src: /rjs-build/test-data/notification-settings.json
    path: ~~.notifications
    method: GET
    blocking: false
