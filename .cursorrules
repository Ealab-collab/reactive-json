# Instructions for Cursor AI - Reactive-JSON

## Reference Documentation
- Installation: `npm install --save-dev @ea-lab/reactive-json-docs`
- Main documentation entry point with demos: `node_modules/@ea-lab/reactive-json-docs/public/rjbuild/docs/index.yaml`
- **Component Development** (React source code): `node_modules/@ea-lab/reactive-json-docs/public/rjbuild/docs/extend/`
  - `component-development.md`: Complete guide for creating React components
  - `plugin-system.md`: Plugin system and architecture
- **Component Usage** (JSON/YAML configuration): `node_modules/@ea-lab/reactive-json-docs/public/rjbuild/docs/core/`
  - `action/`: Action components usage (Hide, Tooltip, Popover, etc.)
  - `element/`: Element components usage (form fields, HTML elements, etc.) 
  - `reaction/`: Reaction components usage (data operations)
  - `example/`: Complete examples and use cases
- Chart.js integration overview: `node_modules/@ea-lab/reactive-json-docs/public/rjbuild/docs/chartjs/`

## Main Instructions
1. **ALWAYS consult the documentation in `@ea-lab/reactive-json-docs` package** before proposing solutions
2. Start with `node_modules/@ea-lab/reactive-json-docs/public/rjbuild/docs/index.yaml` or relevant category documentation
3. Follow the patterns and examples shown in the .yaml and .md files
4. **Documentation Priority**: Prefer .md files when available (more digestible for LLM analysis), fallback to .yaml files if .md doesn't exist
5. **Context-Aware Documentation**: 
   - For React component development → `extend/component-development.md`
   - For JSON/YAML usage → `core/[category]/`
6. Refer to the comprehensive examples in `node_modules/@ea-lab/reactive-json-docs/public/rjbuild/docs/core/example/`

**Context-Specific References**:
- For **creating/developing** React components → use `extend/component-development.md`
- For **using/configuring** components in JSON/YAML → use `core/[category]/`

## Component Validation Rules

1. For each component, STRICTLY verify:
   - The structure of properties in the documentation
   - The type of each property (array, object, string, etc.)
   - The examples provided in .md and .yaml files

2. For array-type properties:
   - ✅ Allow multiple distinct elements
   - ❌ Never duplicate properties within the same element
   - ✅ Respect the unitary structure of each element

3. Documentation conventions:
   - If a property is an array, it accepts multiple DISTINCT elements
   - Each array element must strictly follow the documented schema
   - Multiple conditions must be distributed across separate elements

4. When in doubt:
   - Always refer to the documentation examples
   - Do not extrapolate undocumented functionalities
   - Prioritize simplicity and clarity

## Language Rules
- Respond in the language of the user's question or as specified by the user in the conversation
- Always write documentation content in English, regardless of the conversation language

## Response Process
1. First consult the relevant documentation in `@ea-lab/reactive-json-docs` package
2. Verify existing examples in the appropriate category
3. Apply validation rules
4. Propose a solution compliant with standards 